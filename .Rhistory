#create a data frame of sample names and class
class<-character(length = nrow(d))
class[match(unique(controlsU),rownames(d))]<-"control"
class[setdiff(1:nrow(d),match(unique(controlsU),rownames(d)))]<-"unknown"
controls<-cbind(GSM=rownames(d),class=class)
View(controls)
d<-downloadPhenotypePlatform("GSE2842","GPL570")
source('E:/Dropbox (MXM - UoC)/Documents/Data-Based IR/DBIR/src/GEO/controlSamples.R', echo=TRUE)
c<-controlSamples(d)
View(c)
?getGEOSuppFiles
source('E:/Dropbox (MXM - UoC)/Documents/Data-Based IR/DBIR/src/GEO/downloadRaw.R', echo=TRUE)
d<-downloadRaw("GSE89098","C:\Users\kliolak\Desktop\klio")
d<-downloadRaw("GSE89098","C:/Users/kliolak/Desktop/klio")
d<-downloadRaw("GSE47105","C:/Users/kliolak/Desktop/klio")
preprocessGEO<-function(x,y){
cl <- makeCluster(y)
registerDoParallel(cl)
normalized =SCAN( "*.CEL.gz")
stopCluster(cl)
normalized<-exprs(normalized)
return(normalized)
}
x<-"C:/Users/kliolak/Desktop/klio"
x<-"C:/Users/kliolak/Desktop/klio/GSE47105_RAW/"
y=3
library(SCAN.UPC)
library(doParallel)
tt<-preprocessGEO(x,y)
preprocessGEO<-function(x,y){
setwd(x)
cl <- makeCluster(y)
registerDoParallel(cl)
normalized =SCAN( "*.CEL.gz")
stopCluster(cl)
normalized<-exprs(normalized)
return(normalized)
}
tt<-preprocessGEO(x,y)
class(tt)
dim(tt)
library(SCAN.UPC)
library(doParallel)
library(GEOquery)
options(stringsAsFactors = F)
path<-"//algonas.csd.uoc.gr/Public/Dataome/"
platforms<-list.files(path,pattern=".txt")
platforms<-list.files(path,pattern=".txt")
#find GEO platforms
gpl<-str_extract(platforms, "GPL[0-9]+")
library(stringr)
platforms<-list.files(path,pattern=".txt")
#find GEO platforms
gpl<-str_extract(platforms, "GPL[0-9]+")
?str_extract
gpl<-!is.na(str_extract(platforms, "GPL[0-9]+"))
gpl<-platforms[!is.na(str_extract(platforms, "GPL[0-9]+"))]
platforms<-unlist(strsplit(gpl,".txt"))
length(platforms)
paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]")
i=1
paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]")
r_search <- entrez_search(db="gds", term=paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]"),
retmax =10000, use_history=TRUE)
library(rentrez)
r_search <- entrez_search(db="gds", term=paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]"),
retmax =10000, use_history=TRUE)
count<-r_search$count
r_search$ids
?entrez_summary
a<-mapply(entrez_summary,db="gds",  id=r_search$ids)
a
count
gse<-c()
for (i in 1:count){
a<-entrez_summary(db="gds",  id=r_search$ids[i])
gse[i]<-a$gse
print(i)
}
gse
entrezIDtoGSE<-function(x){
count<-x$count
etoGSE<-matrix(NA,nrow=count,ncol=2)
for (i in 1:count){
a<-entrez_summary(db="gds",  id=x$ids[i])
etoGSE[i,1]<-a$gse
etoGSE[i,2]<-x$ids[i]
}
return(etoGSE)
}
tt<-entrezIDtoGSE(r_search)
tt
tt<-entrezIDtoGSE(r_search[1:2])
class(r_search
class(r_search)
r_search[1:2]
r_search[[1:2]]
r_search[[1]]
w<-r_search[1:@]
w<-r_search[1:2]
w<-r_search[[1:2]]
x<-r_search
count<-x$count
etoGSE<-matrix(NA,nrow=count,ncol=2)
for (i in 1:count){
a<-entrez_summary(db="gds",  id=x$ids[i])
etoGSE[i,1]<-a$gse
etoGSE[i,2]<-x$ids[i]
}
View(etoGSE)
colnames(etoGSE)<-c("GSE","entrezID")
View(etoGSE)
test<-entrezIDtoGSE(r_search)
x
count<-x$count
etoGSE<-matrix(NA,nrow=count,ncol=2)
for (i in 1:count){
a<-entrez_summary(db="gds",  id=x$ids[i])
etoGSE[i,1]<-a$gse
etoGSE[i,2]<-x$ids[i]
print(i)
}
i
a<-entrez_summary(db="gds",  id=x$ids[i])
ids[i]
x$ids[i]
is.na(x$ids[i])
a$gse
x$ids[i]
count<-x$count
etoGSE<-matrix(NA,nrow=count,ncol=2)
for (i in 1:count){
if (!is.na(x$ids[i])){
a<-entrez_summary(db="gds",  id=x$ids[i])
etoGSE[i,1]<-a$gse
etoGSE[i,2]<-x$ids[i]
} else {
etoGSE[i,1]<-a$gse
etoGSE[i,2]<-NA
}
print(i)
}
colnames(etoGSE)<-c("GSE","entrezID")
dim(etoGSE)
View(etoGSE)
setwd("E:/Dropbox (MXM - UoC)/Documents/Data-Based IR/DBIR/")
platforms[i]
file.path(UsefulFiles,paste0("eToGSE_",platforms[1],".Rda"))
file.path("UsefulFiles",paste0("eToGSE_",platforms[1],".Rda"))
paste0("UsefulFiles/eToGSE_",platforms[1],".Rda")
getwd()
save(etoGSE, file=paste0("UsefulFiles/eToGSE_",platforms[1],".Rda"))
options(stringsAsFactors = F)
library(stringr)
library(rentrez)
source('src/GEO/entrezIDtoGSE.R', echo=TRUE)
#list of GEO platforms currently curated in BioDataome
platforms<-read.table("UsefulFiles/Platforms.txt", sep="\t", header=T)
#find gene epxression microarry GEO platforms
platforms<-platforms$Technology[which(platforms$Entity=="Gene expression" & platforms$Type=="in situ oligonucleotide")]
for (i in 3:length(platforms)){
r_search <- entrez_search(db="gds", term=paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]"),
retmax =10000, use_history=TRUE)
eToGSE<-entrezIDtoGSE(r_search)
save(eToGSE, file=file.path(UsefulFiles,paste0("eToGSE_",platforms[i],".Rda")))
}
i
getwd()
platforms[i]
library(SCAN.UPC)
library(doParallel)
library(GEOquery)
library(stringr)
library(rentrez)
options(stringsAsFactors = F)
dataPath<-"//algonas.csd.uoc.gr/Public/Dataome/"
#list of GEO platforms currently curated in BioDataome
#list of GEO platforms currently curated in BioDataome
platforms<-read.table("UsefulFiles/Platforms.txt", sep="\t", header=T)
#find gene epxression microarry GEO platforms
platforms<-platforms$Technology[which(platforms$Entity=="Gene expression" & platforms$Type=="in situ oligonucleotide")]
library(SCAN.UPC)
library(doParallel)
library(GEOquery)
library(stringr)
library(rentrez)
options(stringsAsFactors = F)
dataPath<-"//algonas.csd.uoc.gr/Public/Dataome/"
#list of GEO platforms currently curated in BioDataome
#list of GEO platforms currently curated in BioDataome
platforms<-read.table("UsefulFiles/Platforms.txt", sep="\t", header=T)
#find gene epxression microarry GEO platforms
platforms<-platforms$Technology[which(platforms$Entity=="Gene expression" & platforms$Type=="in situ oligonucleotide")]
i=1
r_search <- entrez_search(db="gds", term=paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]"),
retmax =10000, use_history=TRUE)
count<-r_search$count
entrezIDs<-sapply(r_search,"[[",1)
entrezIDs<-sapply(r_search,"[",1)
class(r_search)
r_search$ids
entrezIDs<-r_search$ids
class(entrezIDs)
length(entrezIDs)
r_search <- entrez_search(db="gds", term=paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]"),
use_history=TRUE)
entrezIDs<-r_search$ids
?entrez_search
a<-mapply(entrez_summary,db="gds",  id=r_search$ids)
r_search <- entrez_search(db="gds", term=paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]"),
retmax =10000, use_history=TRUE)
r_search <- entrez_search(db="gds", term=paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]"),
retmax =1000000, use_history=TRUE)
r_search <- entrez_search(db="gds", term=paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]"),
retmax =100000, use_history=TRUE)
entrezIDs<-r_search$ids
r_search <- entrez_search(db="gds", term=paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]"),
retmax =r_search$count, use_history=TRUE)
entrezIDs<-r_search$ids
rm(r_search)
r_search <- entrez_search(db="gds", term=paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]"),
retmax =r_search$count, use_history=TRUE)
r_search <- entrez_search(db="gds", term=paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]"),
retmax =10000, use_history=TRUE)
r_search <- entrez_search(db="gds", term=paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]"),
retmax =10000, use_history=TRUE)
count<-r_search$count
r_search <- entrez_search(db="gds", term=paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]"),
retmax =count, use_history=TRUE)
entrezIDs<-r_search$ids
length(entrezIDs)
r_search <- entrez_search(db="gds", term=paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]"),
use_history=TRUE)
count<-r_search$count
dataPath<-"//algonas.csd.uoc.gr/Public/Dataome/"
species<- platforms$Species[which(platforms$Entity=="Gene expression" & platforms$Type=="in situ oligonucleotide")]
Platforms<-read.table("UsefulFiles/Platforms.txt", sep="\t", header=T)
#find gene epxression microarry GEO platforms
platforms<-Platforms$Technology[which(platforms$Entity=="Gene expression" & platforms$Type=="in situ oligonucleotide")]
species<- Platforms$Species[which(platforms$Entity=="Gene expression" & platforms$Type=="in situ oligonucleotide")]
Platforms<-read.table("UsefulFiles/Platforms.txt", sep="\t", header=T)
platforms<-Platforms$Technology[which(Platforms$Entity=="Gene expression" & Platforms$Type=="in situ oligonucleotide")]
species<- Platforms$Species[which(Platforms$Entity=="Gene expression" & Platforms$Type=="in situ oligonucleotide")]
i
species[i]
file.path(dataPath,species[i],platforms[i])
processedIDs<-list.files(file.path(dataPath,species[i],platforms[i]))
gses <- "GSE[0-9]+"
gses<-str_extract(processedIDs, gses)
processedIDs<-list.files(file.path(dataPath,species[i],platforms[i]))
gses <- "GSE[0-9]+"
processedIDs<-str_extract(processedIDs, gses)
gses <- "GSE[0-9].Rda"
processedIDs<-str_extract(processedIDs, gses)
processedIDs<-list.files(file.path(dataPath,species[i],platforms[i]))
gses <- "GSE[0-9].Rda"
processedIDs<-str_extract(processedIDs, gses)
processedIDs<-list.files(file.path(dataPath,species[i],platforms[i]))
gses <- "GSE[0-9].Rda"
processedIDs<-str_extract(processedIDs, gses)
gses <- "GSE[0-9].Rda$"
processedIDs<-list.files(file.path(dataPath,species[i],platforms[i]))
gses <- "GSE[0-9].Rda$"
processedIDs<-str_extract(processedIDs, gses)
processedIDs
processedIDs<-list.files(file.path(dataPath,species[i],platforms[i]))
dlist<-processedIDs[grep(pattern="GSE[0-9]+.Rda$", processedIDs)]
processedIDs2<-str_extract(processedIDs, gses)
#find r_search ids that are not already in BioDataome
processedIDs<-list.files(file.path(dataPath,species[i],platforms[i]))
processedIDs<-processedIDs[grep(pattern="GSE[0-9]+.Rda$", processedIDs)]
processedIDs<-unlist(strsplit(processedIDs, ".Rda"))
paste0("UsefulFiles/","eToGSE",platforms[i],".Rda")
paste0("UsefulFiles/","eToGSE_",platforms[i],".Rda")
eToGSE<-get(load(paste0("UsefulFiles/","eToGSE_",platforms[i],".Rda")))
etoGSE<-get(load(paste0("UsefulFiles/","eToGSE_",platforms[i],".Rda")))
rm(etoGSE)
rm(eToGSE)
eToGSE<-get(load(paste0("UsefulFiles/","eToGSE_",platforms[i],".Rda")))
View(eToGSE)
dim(eToGSE)
54908-322
platforms[i]
toProcessedIDs<-setdiff(paste0("GSE",eToGSE),processedIDs)
paste0("GSE",eToGSE)
processedIDs
length(toProcessedIDs)
length(paste0("GSE",eToGSE))
toProcessedIDs<-setdiff(paste0("GSE",eToGSE[,1]),processedIDs)
length(paste0("GSE",eToGSE[,1]))
length(processedIDs)
toProcessedIDs<-setdiff(processedIDs,paste0("GSE",eToGSE[,1]))
processedIDs
paste0("GSE",eToGSE[,1])
a<-processedIDs
which(a=="GSE10011")
a<-paste0("GSE",eToGSE[,1])
which(a=="GSE10011")
a[3466]
gseIDs<-paste0("GSE",eToGSE[,1])
toProcessedIDs<-setdiff(processedIDs,gseIDs)
toProcessedIDs<-intersect(processedIDs,paste0("GSE",eToGSE[,1]))
processedIDs
paste0("GSE",eToGSE[,1])
toProcessIDs<-setdiff(processedIDs,paste0("GSE",eToGSE[,1]))
?setdiff
toProcessIDs<-setdiff(paste0("GSE",eToGSE[,1]),processedIDs)
length(toProcessIDs)
a<-paste0("GSE",eToGSE[,1])
toProcessIDs<-setdiff(a,processedIDs)
length(a)
match(paste0("GSE",eToGSE[,1]),processedIDs)
paste0("GSE",eToGSE[,1]) %in% processedIDs
which(paste0("GSE",eToGSE[,1]) %in% processedIDs)
length(which(paste0("GSE",eToGSE[,1]) %in% processedIDs))
length(which(processedIDs %in% paste0("GSE",eToGSE[,1])  ))
class(paste0("GSE",eToGSE[,1]))
class(processedIDs)
processedIDs
paste0("GSE",eToGSE[,1])
which(processedIDs %in% paste0("GSE",eToGSE[,1])  )
length(which(paste0("GSE",eToGSE[,1])  %in% processedIDs ))
#query GEO for all series of a specific platform which also provide CEL files
r_search <- entrez_search(db="gds", term=paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]"),
use_history=TRUE)
#find number of records
count<-r_search$count
#call entrez_search again to get ALL entrezIDs
r_search <- entrez_search(db="gds", term=paste0("CEL[SFIL] AND ",platforms[i],"[ACCN]"),
retmax =count, use_history=TRUE)
entrezIDs<-r_search$ids
#find r_search ids that are not already in BioDataome
processedIDs<-list.files(file.path(dataPath,species[i],platforms[i]))
processedIDs<-processedIDs[grep(pattern="GSE[0-9]+.Rda$", processedIDs)]
processedIDs<-unlist(strsplit(processedIDs, ".Rda"))
#load entrezID to GSE files
eToGSE<-get(load(paste0("UsefulFiles/","eToGSE_",platforms[i],".Rda")))
eToGSEU<-paste0("GSE",unique(eToGSE[,1]))
toProcessIDs<-setdiff(eToGSEU,processedIDs)
3602+322
toProcessIDs
length(toProcessIDs)
j=1
toProcessIDs[j]
platforms[i]
phenos<-downloadPhenotypePlatform(toProcessIDs[j],platforms[i])
View(phenos)
controls<-controlSamples(phenos)
View(controls)
match(row.names(phenos),controls[,1])
phenos<-cbind(class=controls[match(row.names(phenos),controls[,1]),2])
View(phenos)
phenos<-downloadPhenotypePlatform(toProcessIDs[j],platforms[i])
#add control information in annotation
controls<-controlSamples(phenos)
phenos<-cbind(class=controls[match(row.names(phenos),controls[,1]),2],phenos)
View(phenos)
dataPath
paste0(dataPath,species[i],"/",platforms[i],toProcessIDs[j],"_Annot.txt")
paste0(dataPath,species[i],"/",platforms[i],"/",toProcessIDs[j],"_Annot.txt")
phenos<-downloadPhenotypePlatform(toProcessIDs[j],platforms[i])
#add control information in annotation
controls<-controlSamples(phenos)
phenos<-cbind(samples=row.names(phenos),class=controls[match(row.names(phenos),controls[,1]),2],phenos)
View(phenos)
write.table(phenos, file=paste0(dataPath,species[i],"/",platforms[i],"/",toProcessIDs[j],"_Annot.txt"),
sep="\t",row.names = F, col.names = T)
write.table(phenos, file=paste0(dataPath,species[i],"/",platforms[i],"/",toProcessIDs[j],"_Annot.csv"),
sep=",",row.names = F)
samples<-row.names(phenos)
tmpRAW<-"//algonas.csd.uoc.gr/Public/Dataome/tempRAW/"
toProcessIDs[j]
tmpRAW
downloadRaw(toProcessIDs[j],tmpRAW)
paste0(toProcessIDs[j],"_RAW.tar")
untar(file.path(tmpRAW,paste0(toProcessIDs[j],"_RAW.tar")), exdir = tmpRAW)
file.remove(file.path(tmpRAW,paste0(toProcessIDs[j],"_RAW.tar")))
?list.files
allFiles<-list.files(tmpRAW, pattern = ".cel",ignore.case = T)
celfiles<-list.files(tmpRAW, pattern = ".cel",ignore.case = T)
?grep
grep(pattern="GSM[0-9]+.Rda$", celfiles,ignore.case = T)
celfiles<-list.files(tmpRAW, pattern = ".cel",ignore.case = T)
grep(pattern="GSM[0-9]+.Rda$", celfiles,ignore.case = T)
grep(pattern="GSM[0-9]+.CEL$", celfiles,ignore.case = T)
celfiles
grep(pattern="GSM[0-9]+.gz$", celfiles,ignore.case = T)
grep(pattern="GSM[0-9]+.gz$", celfiles,ignore.case = T)
grep(pattern="GSM[0-9]+.CEL.gz$", celfiles,ignore.case = T)
grep(pattern="GSM[0-9]+.gz$", celfiles,ignore.case = T)
?startsWith
startsWith(celfiles,samples)
samples2<-samples[1:4]
startsWith(celfiles,samples2)
celsKeep<-celfiles[startsWith(celfiles,samples)]
setdiff(celsKeep,celfiles)
toRemove<-setdiff(celsKeep,celfiles)
celfiles<-list.files(tmpRAW, pattern = ".cel",ignore.case = T)
#keep only cel files that have annotation
celsKeep<-celfiles[startsWith(celfiles,samples)]
#remove the rest
toRemove<-setdiff(celsKeep,celfiles)
file.remove(file.path(tmpRAW,toRemove))
samples<-samples[1:3]
celsKeep<-celfiles[startsWith(celfiles,samples)]
#remove the rest
toRemove<-setdiff(celsKeep,celfiles)
celsKeep
celsKeep
celfiles
setdiff(celsKeep,celfiles)
toRemove<-setdiff(celfiles,celsKeep)
file.remove(file.path(tmpRAW,toRemove))
toProcessIDs[j]
#download raw files
downloadRaw(toProcessIDs[j],tmpRAW)
untar(file.path(tmpRAW,paste0(toProcessIDs[j],"_RAW.tar")), exdir = tmpRAW)
file.remove(file.path(tmpRAW,paste0(toProcessIDs[j],"_RAW.tar")))
#by default downloadRaw will download all CEL files for the specific GSE
celfiles<-list.files(tmpRAW, pattern = ".cel",ignore.case = T)
#keep only cel files that have annotation
celsKeep<-celfiles[startsWith(celfiles,samples)]
#remove the rest
toRemove<-setdiff(celfiles,celsKeep)
file.remove(file.path(tmpRAW,toRemove))
#download annotation
phenos<-downloadPhenotypePlatform(toProcessIDs[j],platforms[i])
samples<-row.names(phenos)
#add control information in annotation
controls<-controlSamples(phenos)
phenos<-cbind(samples=samples,class=controls[match(samples,controls[,1]),2],phenos)
#write annotation file in BioDataome
write.table(phenos, file=paste0(dataPath,species[i],"/",platforms[i],"/",toProcessIDs[j],"_Annot.csv"),
sep=",",row.names = F)
#download raw files
downloadRaw(toProcessIDs[j],tmpRAW)
untar(file.path(tmpRAW,paste0(toProcessIDs[j],"_RAW.tar")), exdir = tmpRAW)
file.remove(file.path(tmpRAW,paste0(toProcessIDs[j],"_RAW.tar")))
#by default downloadRaw will download all CEL files for the specific GSE
celfiles<-list.files(tmpRAW, pattern = ".cel",ignore.case = T)
#keep only cel files that have annotation
celsKeep<-celfiles[startsWith(celfiles,samples)]
#remove the rest
toRemove<-setdiff(celfiles,celsKeep)
file.remove(file.path(tmpRAW,toRemove))
toProcessIDs[j]
tmpRAW
dataNorm<-preprocessGEO(toProcessIDs[j],tmpRAW)
dataNorm<-preprocessGEO(tmpRAW,3)
paste0(dataPath,species[i],"/",platforms[i],"/",toProcessIDs[j],".Rda")
save(dataNorm, file=paste0(dataPath,species[i],"/",platforms[i],"/",toProcessIDs[j],".Rda"))
dim(dataNorm)
d<-round(t(dataNorm), digits = 4)
row.names(d)
samples
row.names(d)<-samples
d<-cbind.data.frame(samples=samples,d)
View(d)
dataPath
write.table(d, file=paste0(dataPath,species[i],"/",platforms[i],"/",toProcessIDs[j],".csv"),
sep=",",row.names = F)
unlink(tmpRAW, recursive = T)
tmpRAW
file.remove(tmpRAW)
unlink("tmpRAW/*")
tmpRAW
unlink("tmpRAW/*",recursive = T)
unlink("tmpRAW/*",recursive = T)
unlink("tmpRAW/*",recursive = T)
dir("tmpRAW", full.names=TRUE)
tmpRAW
dir(tmpRAW, full.names=TRUE)
file.remove(dir(tmpRAW, full.names=TRUE))
paste0(dataPath,platforms[i],".txt")
indFile<-read.table(paste0(dataPath,platforms[i],".txt"), sep="\t", header=T)
View(indFile)
rm(list=ls())
library(SCAN.UPC)
library(doParallel)
library(GEOquery)
library(rentrez)
options(stringsAsFactors = F)
dataPath<-"//algonas.csd.uoc.gr/Public/Dataome/"
tmpRAW<-"//algonas.csd.uoc.gr/Public/Dataome/tempRAW/"
#list of GEO platforms currently curated in BioDataome
#list of GEO platforms currently curated in BioDataome
Platforms<-read.table("UsefulFiles/Platforms.txt", sep="\t", header=T)
#find gene epxression microarry GEO platforms
platforms<-Platforms$Technology[which(Platforms$Entity=="Gene expression" & Platforms$Type=="in situ oligonucleotide")]
species<- Platforms$Species[which(Platforms$Entity=="Gene expression" & Platforms$Type=="in situ oligonucleotide")]
setwd("E:/Dropbox (MXM - UoC)/Documents/Data-Based IR/DBIR/")
dataPath<-"//algonas.csd.uoc.gr/Public/Dataome/"
tmpRAW<-"//algonas.csd.uoc.gr/Public/Dataome/tempRAW/"
#list of GEO platforms currently curated in BioDataome
#list of GEO platforms currently curated in BioDataome
Platforms<-read.table("UsefulFiles/Platforms.txt", sep="\t", header=T)
#find gene epxression microarry GEO platforms
platforms<-Platforms$Technology[which(Platforms$Entity=="Gene expression" & Platforms$Type=="in situ oligonucleotide")]
species<- Platforms$Species[which(Platforms$Entity=="Gene expression" & Platforms$Type=="in situ oligonucleotide")]
i=1
processedIDs<-list.files(file.path(dataPath,species[i],platforms[i]))
processedIDs<-processedIDs[grep(pattern="GSE[0-9]+.Rda$", processedIDs)]
processedIDs<-unlist(strsplit(processedIDs, ".Rda"))
length(toProcessIDs)
length(processedIDs)
j=1
phenos<-downloadPhenotypePlatform(toProcessIDs[j],platforms[i])
samples<-row.names(phenos)
source('E:/Dropbox (MXM - UoC)/Documents/Data-Based IR/DBIR/src/GEO/downloadPhenotypePlatform.R', echo=TRUE)
phenos<-downloadPhenotypePlatform(toProcessIDs[j],platforms[i])
source('E:/Dropbox (MXM - UoC)/Documents/Data-Based IR/DBIR/src/GEO/downloadPhenotype.R', echo=TRUE)
phenos<-downloadPhenotypePlatform(toProcessIDs[j],platforms[i])
